package com.tisawesomeness.minecord.testutil.runner;

import com.tisawesomeness.minecord.command.Result;

import lombok.NonNull;
import net.dv8tion.jda.api.entities.MessageEmbed;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.CharSequenceAssert;
import org.assertj.core.internal.Iterables;

import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;

/**
 * Assertions for {@link TestContext} - Initially generated by CustomAssertionGenerator, heavily modified and expanded.
 */
public class TestContextAssert extends AbstractAssert<TestContextAssert, TestContext> {

    private long timeout = 100;
    private TimeUnit unit = TimeUnit.MILLISECONDS;
    private final long MAX_TIMEOUT_MILIS = TimeUnit.MINUTES.toMillis(1);


    /**
     * Creates a new <code>{@link TestContextAssert}</code> to make assertions on actual TestContext.
     * @param actual the TestContext we want to make assertions on.
     */
    public TestContextAssert(TestContext actual) {
        super(actual, TestContextAssert.class);
    }

    /**
     * An entry point for TestContextAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myTestContext)</code> and get specific assertion with code completion.
     * @param actual the TestContext we want to make assertions on.
     * @return a new <code>{@link TestContextAssert}</code>
     */
    public static TestContextAssert assertThat(TestContext actual) {
        return new TestContextAssert(actual);
    }


    /**
     * Verifies that the actual TestContext's replies contains the given CharSequence elements.
     * @param replies the given elements that should be contained in actual TestContext's replies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's replies does not contain all given CharSequence elements.
     */
    public TestContextAssert repliesContains(CharSequence... replies) {
        isNotNull();
        if (replies == null) failWithMessage("Expecting replies parameter not to be null.");
        Iterables.instance().assertContains(info, actual.getReplies(), replies);
        return this;
    }

    /**
     * Verifies that the actual TestContext's replies contains <b>exactly<b> the given CharSequence elements and nothing else in order.
     * @param replies the given elements that should be contained in actual TestContext's replies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's replies does not contain all given CharSequence elements.
     */
    public TestContextAssert repliesAre(CharSequence... replies) {
        isNotNull();
        if (replies == null) failWithMessage("Expecting replies parameter not to be null.");
        Iterables.instance().assertContainsExactly(info, actual.getReplies(), replies);
        return this;
    }

    /**
     * Verifies that the actual TestContext's replies does not contain the given CharSequence elements.
     *
     * @param replies the given elements that should not be in actual TestContext's replies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's replies contains any given CharSequence elements.
     */
    public TestContextAssert repliesDoesNotContain(CharSequence... replies) {
        isNotNull();
        if (replies == null) failWithMessage("Expecting replies parameter not to be null.");
        Iterables.instance().assertDoesNotContain(info, actual.getReplies(), replies);
        return this;
    }

    /**
     * Verifies that the actual TestContext has no replies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's replies is not empty.
     */
    public TestContextAssert repliesIsEmpty() {
        isNotNull();
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have replies but had :\n  <%s>";
        if (actual.getReplies().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getReplies());
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has one or more replies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's replies is empty.
     */
    public TestContextAssert repliesIsNotEmpty() {
        isNotNull();
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nto have replies but was empty";
        if (!actual.getReplies().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual);
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has a specific number of replies.
     * @param size the expected size.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's replies is not the expected size.
     */
    public TestContextAssert repliesHasSize(int size) {
        isNotNull();
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nreplies to have size <%d> but had size :\n  <%d>";
        int actualSize = actual.getReplies().size();
        if (actualSize != size) {
            failWithMessage(assertjErrorMessage, actual, size, actualSize);
        }
        return this;
    }


    /**
     * Verifies that the actual TestContext's embedReplies contains the given MessageEmbed elements.
     * @param embedReplies the given elements that should be contained in actual TestContext's embedReplies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's embedReplies does not contain all given MessageEmbed elements.
     */
    public TestContextAssert embedRepliesContains(MessageEmbed... embedReplies) {
        isNotNull();
        if (embedReplies == null) failWithMessage("Expecting embedReplies parameter not to be null.");
        Iterables.instance().assertContains(info, actual.getEmbedReplies(), embedReplies);
        return this;
    }

    /**
     * Verifies that the actual TestContext's embedReplies contains <b>exactly<b> the given MessageEmbed elements and nothing else in order.
     * @param embedReplies the given elements that should be contained in actual TestContext's embedReplies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's embedReplies does not contain all given MessageEmbed elements.
     */
    public TestContextAssert embedRepliesAre(MessageEmbed... embedReplies) {
        isNotNull();
        if (embedReplies == null) failWithMessage("Expecting embedReplies parameter not to be null.");
        Iterables.instance().assertContainsExactly(info, actual.getEmbedReplies(), embedReplies);
        return this;
    }

    /**
     * Verifies that the actual TestContext's embedReplies does not contain the given MessageEmbed elements.
     *
     * @param embedReplies the given elements that should not be in actual TestContext's embedReplies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's embedReplies contains any given MessageEmbed elements.
     */
    public TestContextAssert embedRepliesDoesNotContain(MessageEmbed... embedReplies) {
        isNotNull();
        if (embedReplies == null) failWithMessage("Expecting embedReplies parameter not to be null.");

        Iterables.instance().assertDoesNotContain(info, actual.getEmbedReplies(), embedReplies);
        return this;
    }

    /**
     * Verifies that the actual TestContext has no embedReplies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's embedReplies is not empty.
     */
    public TestContextAssert embedRepliesIsEmpty() {
        isNotNull();
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have embedReplies but had :\n  <%s>";
        if (actual.getEmbedReplies().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getEmbedReplies());
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has one or more embedReplies.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's embedReplies is empty.
     */
    public TestContextAssert embedRepliesIsNotEmpty() {
        isNotNull();
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nto have embedReplies but embedReplies was empty";
        if (!actual.getEmbedReplies().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual);
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has a specific number of embed replies.
     * @param size the expected size.
     * @return this assertion object.
     * @throws AssertionError if the actual TestContext's embed replies is not the expected size.
     */
    public TestContextAssert embedRepliesHasSize(int size) {
        isNotNull();
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nembed replies to have size <%d> but had size :\n  <%d>";
        int actualSize = actual.getEmbedReplies().size();
        if (actualSize != size) {
            failWithMessage(assertjErrorMessage, actual, size, actualSize);
        }
        return this;
    }


    /**
     * Verifies that the actual TestContext has requested help.
     * @return this assertion object.
     * @throws AssertionError - if the actual TestContext has not requested help.
     */
    public TestContextAssert hasRequestedHelp() {
        isNotNull();
        if (!actual.hasRequestedHelp()) {
            failWithMessage("\nExpecting that actual TestContext has requested help but has not.");
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has not requested help.
     * @return this assertion object.
     * @throws AssertionError - if the actual TestContext has requested help.
     */
    public TestContextAssert hasNotRequestedHelp() {
        isNotNull();
        if (actual.hasRequestedHelp()) {
            failWithMessage("\nExpecting that actual TestContext has not requested help but has.");
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has triggered cooldown.
     * @return this assertion object.
     * @throws AssertionError - if the actual TestContext has not triggered cooldown.
     */
    public TestContextAssert hasTriggeredCooldown() {
        isNotNull();
        if (!actual.hasTriggeredCooldown()) {
            failWithMessage("\nExpecting that actual TestContext has triggered cooldown but has not.");
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has not triggered cooldown.
     * @return this assertion object.
     * @throws AssertionError - if the actual TestContext has triggered cooldown.
     */
    public TestContextAssert hasNotTriggeredCooldown() {
        isNotNull();
        if (actual.hasTriggeredCooldown()) {
            failWithMessage("\nExpecting that actual TestContext has not triggered cooldown but has.");
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext's result is equal to the given one.
     * @param result the given result to compare the actual TestContext's result to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TestContext's result is not equal to the given one.
     */
    public TestContextAssert resultIs(Result result) {
        isNotNull();
        String assertjErrorMessage = "\nExpecting result of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
        Result actualResult = actual.getResult();
        if (!Objects.deepEquals(actualResult, result)) {
            failWithMessage(assertjErrorMessage, actual, result, actualResult);
        }
        return this;
    }

    /**
     * Verifies that the actual TestContext has <b>only</b> requested help, without replying or triggering cooldown.
     * This will wait until the timeout expires to ensure that all replies are received.
     * @return this assertion object.
     * @throws AssertionError - if the actual TestContext has not only requested help.
     */
    public TestContextAssert onlyShowsHelp() {
        isNotNull();
        awaitTimeout();
        hasRequestedHelp();
        resultIs(Result.HELP);
        hasNotTriggeredCooldown();
        repliesIsEmpty();
        embedRepliesIsEmpty();
        return this;
    }


    /**
     * Sets the timeout for await methods. Must be 1 minute or less to prevent tests from running for too long.
     * @param timeout how long to wait before timing out.
     * @param unit the time unit of the timeout duration.
     * @return this assertion object.
     * @throws IllegalArgumentException - If the timeout parameter is negative or over 1 minute.
     */
    public TestContextAssert withTimeout(long timeout, @NonNull TimeUnit unit) {
        if (timeout < 0) {
            throw new IllegalArgumentException("Timeout must be positive but was " + timeout);
        }
        if (unit.toMillis(timeout) > MAX_TIMEOUT_MILIS) {
            throw new IllegalArgumentException(
                    "Timeout is longer than one minute, preventing tests from running for too long.");
        }
        this.timeout = timeout;
        this.unit = unit;
        return this;
    }

    /**
     * Waits until the given condition is met.
     * @param condition A Predicate that tests for a specific condition, see {@link TestContext.View}
     *                  for the available methods.
     * @return this assertion object.
     * @throws AssertionError - If the timeout expires.
     */
    public TestContextAssert awaitCondition(@NonNull Predicate<TestContext.View> condition) {
        isNotNull();
        awaitCondition(condition, "More than %s elapsed while awaiting condition", timeoutString());
        return this;
    }

    private void awaitCondition(@NonNull Predicate<TestContext.View> condition, @NonNull String timeoutMessage,
                                Object... arguments) {
        try {
            if (!actual.awaitCondition(condition, timeout, unit)) {
                failWithMessage(timeoutMessage, arguments);
            }
        } catch (InterruptedException ex) {
            ex.printStackTrace();
            failWithMessage("Interrupted while awaiting condition");
        }
    }

    /**
     * Waits until the timeout expires.
     * @return this assertion object.
     */
    public TestContextAssert awaitTimeout() {
        try {
            Thread.sleep(unit.toMillis(timeout));
        } catch (InterruptedException ex) {
            ex.printStackTrace();
            failWithMessage("Interrupted while awaiting timeout");
        }
        return this;
    }

    /**
     * Waits until the command provides a result.
     * @return this assertion object.
     * @throws AssertionError - If the timeout expires.
     */
    public TestContextAssert awaitResult() {
        isNotNull();
        awaitCondition(tc -> tc.getResult() != null,
                "More than %s elapsed while awaiting result", timeoutString());
        return this;
    }

    /**
     * Waits until the command provides a text reply.
     * @return this assertion object.
     * @throws AssertionError - If the timeout expires.
     */
    public TestContextAssert awaitReply() {
        isNotNull();
        awaitCondition(tc -> !tc.getReplies().isEmpty(),
                "More than %s elapsed while awaiting reply", timeoutString());
        return this;
    }

    /**
     * Waits until the command provides the given number of text replies.
     * @param n the number of replies, this will return immediately if negative.
     * @return this assertion object.
     * @throws AssertionError - If the timeout expires.
     */
    public TestContextAssert awaitReplies(int n) {
        isNotNull();
        awaitCondition(tc -> tc.getReplies().size() >= n,
                "More than %s elapsed while awaiting %d replies", timeoutString(), n);
        return this;
    }

    /**
     * Waits until the command provides an embed reply.
     * @return this assertion object.
     * @throws AssertionError - If the timeout expires.
     */
    public TestContextAssert awaitEmbedReply() {
        isNotNull();
        awaitCondition(tc -> !tc.getEmbedReplies().isEmpty(),
                "More than %s elapsed while awaiting embed reply", timeoutString());
        return this;
    }

    /**
     * Waits until the command provides the given number of embed replies.
     * @param n the number of replies, this will return immediately if negative.
     * @return this assertion object.
     * @throws AssertionError - If the timeout expires.
     */
    public TestContextAssert awaitEmbedReplies(int n) {
        isNotNull();
        awaitCondition(tc -> tc.getEmbedReplies().size() >= n,
                "More than %s elapsed while awaiting %d embed replies", timeoutString(), n);
        return this;
    }

    /**
     * Waits until the command provides the given number of replies of any type.
     * @param n the number of replies, this will return immediately if negative.
     * @return this assertion object.
     * @throws AssertionError - If the timeout expires.
     */
    public TestContextAssert awaitResponses(int n) {
        isNotNull();
        awaitCondition(tc -> tc.getReplies().size() + tc.getEmbedReplies().size() >= n,
                "More than %s elapsed while awaiting %d embed replies", timeoutString(), n);
        return this;
    }

    private String timeoutString() {
        return timeout + " " + unit.toString().toLowerCase();
    }


    /**
     * Extracts the actual TestContext's only reply and creates a CharSequenceAssert object.
     * @return the char sequence assertion object.
     * @throws AssertionError - if the actual TestContext does not have only one reply.
     */
    public CharSequenceAssert asReply() {
        isNotNull();
        repliesHasSize(1);
        CharSequence actualReply = actual.getReplies().get(0);
        return new CharSequenceAssert(actualReply);
    }

    public TestContextAssert repliesSatisfy(Consumer<? super CharSequence> assertion) {
        isNotNull();
        for (CharSequence actualReply : actual.getReplies()) {
            assertion.accept(actualReply);
        }
        return this;
    }

    /**
     * Extracts the actual TestContext's only embed reply and creates a MessageEmbedAssert object.
     * @return the message embed assertion object.
     * @throws AssertionError - if the actual TestContext does not have only one embed reply.
     */
    public MessageEmbedAssert asEmbedReply() {
        isNotNull();
        embedRepliesHasSize(1);
        MessageEmbed actualEmbedReply = actual.getEmbedReplies().get(0);
        return new MessageEmbedAssert(actualEmbedReply);
    }

    public TestContextAssert embedRepliesSatisfy(Consumer<? super MessageEmbed> assertion) {
        isNotNull();
        for (MessageEmbed actualReply : actual.getEmbedReplies()) {
            assertion.accept(actualReply);
        }
        return this;
    }


}
