####################################################
#       Welcome to the Minecord config file!       #
####################################################


# Hope you enjoy self-hosting.
# To start the bot, all you need to edit is the token,
# but of course you can also configure everything else.
#
# To get user/channel/guild IDs:
# - Go to User Settings in Discord
# - Click "Appearance"
# - Turn on Developer Mode
# - You can now right click to get IDs
#
# For help, check out these resources:
# GitHub: https://github.com/Tisawesomeness/Minecord
# Support Server: https://minecord.github.io/support
#
# Pull requests are welcome!
# If you make changes, we would love for you to contribute them
# to the main bot so everyone else can enjoy them too.
#
# Remember that Minecord uses the GNU AGPL-3 license,
# so if you make changes on a public self-hosted bot, you must make it open source.
# https://github.com/Tisawesomeness/Minecord/blob/refactor/LICENSE
#
# Keeping the above in mind, run wild!
# Let's make Minecord the ultimate Minecraft assistant.


# Create a Discord application in the link below and put the token here
# https://discord.com/developers/applications
# ---> KEEP THIS TOKEN SECRET! <---
# If your token leaks, other people can control the bot!
token: "your token here"

# The number of shards (separate connections) to Discord
# Just 1 should be enough for self-hosters
shardCount: 1
# A list of user IDs that will be recognized as owners
# Owners are elevated on startup, can't be demoted, and can't be banned
# Only put people here you absolutely trust
owners:
- 211261249386708992 # Tis_awesomeness#8617
# Bot log messages will be sent to this channel
logChannelId: 0
# Possible log levels: OFF, ERROR, WARN, INFO, DEBUG, TRACE, ALL
# Setting this to INFO or DEBUG is recommended
# Log messages that print before the config is read cannot be changed
logLevel: INFO
# If you are self-hosting, leave this to true
# Setting this to false is unsupported
isSelfHosted: true

# The latest Minecraft version that the bot supports (recipes, servers, etc.)
# If a new version releases and no recipes change, you can update the version below.
supportedMCVersion: "1.15.2"

branding:
  # Your name here
  author: "Tis_awesomeness"
  # Your Discord tag
  "authorTag": "@Tis_awesomeness#8617"
  # The bot invite link, use the format below (replace "CLIENT_ID" with the bot's client ID)
  # https://discord.com/oauth2/authorize?client_id=CLIENT_ID&scope=bot&permissions=93248
  "invite": "https://minecord.github.io/invite"
  # A link to the help server
  "helpServer": "https://minecord.github.io/support"
  # A link to the bot website
  "website": "https://minecord.github.io"
  # If you make changes, link to your fork on GitHub here
  "github": "https://github.com/Tisawesomeness/Minecord"

presence:
  # How often bot presences switch in seconds, set to -1 to update on guild join/leave
  changeInterval: 60
  # Determines how to switch presences, which can be:
  # - CYCLE: go through each presence in order
  # - RANDOM: randomly pick a presence with duplicates
  # - RANDOM_UNIQUE: randomly pick a presence without duplicates
  behavior: RANDOM
  # A list of presences to change between
  # All require a status, which is ONLINE, IDLE, DO_NOT_DISTURB, or INVISIBLE
  # Type is optional, which can be PLAYING, STREAMING, or LISTENING
  # If type is defined, content is the text that displays ("playing <content>")
  presences:
  - status: ONLINE
    type: PLAYING
    content: "@Minecord help | {guilds} guilds"
    url: "https://example.com/url-that-only-displays-when-type-is-STREAMING.php"

settings:
  # The prefix for every command, default is "&" on the main bot
  defaultPrefix: "&"
  # The default lang used for user commands, admin commands and console messages are not translated
  # Current languages: en_US, de_DE, pt_BR
  defaultLang: en_US
  # Whether &recipe and &ingredient create a reaction menu
  defaultUseMenus: true

flags:
  # Collects extra debug information and enables &debug, but makes the bot slower
  debugMode: false
  # If true, announcements from announce.json will be put in the footer of all embeds
  useAnnouncements: false
  # Whether the bot will attempt to load translations from "minecord/lang/*.properties"
  # If the load fails, the standard translations will be used instead
  loadTranslationsFromFile: false
  # If true, the bot will deleteLinks its message when the calling command is deleted.
  linkedDeletion: true
  # Highly recommended to be true, whether the bot responds to "@Minecord command"
  respondToMentions: true
  # Currently bugged, sorry (best to leave this disabled)
  sendTyping: false
  # Whether &info shows memory usage and boot time (&info admin will always show these)
  showExtraInfo: false
  # Whether elevated users skip command cooldowns
  elevatedSkipCooldown: true
  # Whether elevated users can run disabled commands
  # Admin-only commands will still be disabled for elevated users
  elevatedBypassDisabled: true
  # Whether player lookups should use the Electroid API and fallback to the Mojang API
  # If false, only the Mojang API will be used
  useElectroidAPI: true

cache:
  # The amount of time in seconds a guild database record is kept in the cache
  guildLifetime: 600
  # The maximum guild cache size
  # Set to -1 for no limit or 0 to disable caching
  guildMaxSize: -1
  # The amount of time in seconds a channel database record is kept in the cache
  channelLifetime: 600
  # The maximum channel cache size
  # Set to -1 for no limit or 0 to disable caching
  channelMaxSize: -1
  # The amount of time in seconds a user database record is kept in the cache
  userLifetime: 600
  # The maximum user cache size
  # Set to -1 for no limit or 0 to disable caching
  userMaxSize: -1
  # The amount of time in seconds a message link (for linked deletion) is kept in the cache
  linkLifetime: 300
  # The maximum linked deletion cache size
  # Set to -1 for no limit or 0 to disable caching
  linkMaxSize: -1
  # The amount of time in seconds a Username-->UUID mapping is kept in the cache, minimum 60 seconds
  mojangUuidLifetime: 60
  # The amount of time in seconds a UUID-->Player mapping is kept in the cache, minimum 60 seconds
  mojangPlayerLifetime: 60

# Do not post a self-hosted version of Minecord to a bot list
botLists:
  sendServerCount: false
  sendGuildsInterval: 60
  pwToken: "your token here"
  orgToken: "your token here"
  receiveVotes: false
  webhookUrl: "your URL here"
  webhookPort: 8000
  webhookAuth: "your auth here"

database:
  # The path to the SQLite database file
  path: "./minecord/minecord.db"

commands:
  # The default cooldown, in milliseconds, users must wait before using the same command again
  defaultCooldown: 0
  # How often to send command uses to the database in seconds
  pushUsesInterval: 60
  # Overrides for individual commands are defined here
  overrides:
    avatar:
      # The name of the cooldown pool this command is a part of
      cooldownPool: "playerRender"
      # Whether the command is disabled (default enabled)
      # Disabled commands are not registered and will not give a response or show in &help
      disabled: false
    body:
      cooldownPool: "playerRender"
    cape:
      cooldownPool: "playerLookup"
    head:
      cooldownPool: "playerRender"
    history:
      cooldownPool: "playerLookup"
    profile:
      cooldownPool: "playerLookup"
    render:
      cooldownPool: "playerRender"
    skin:
      cooldownPool: "playerLookup"
    uuid:
      # Cooldowns can also be defined explicitly
      cooldown: 3000
    codes:
      cooldown: 1000
    color:
      cooldown: 1000
    status:
      cooldown: 3000
    sales:
      cooldown: 3000
    server:
      cooldown: 3000
    item:
      cooldownPool: "itemLookup"
    recipe:
      cooldownPool: "itemLookup"
    ingredient:
      cooldownPool: "itemLookup"
    sha1:
      cooldown: 500
    guild:
      cooldown: 1500
    role:
      cooldown: 1500
    roles:
      cooldown: 1500
    user:
      cooldown: 1500
    purge:
      cooldown: 5000
    settings:
      cooldownPool: "botConfig"
    set:
      cooldownPool: "botConfig"
    reset:
      cooldownPool: "botConfig"
    prefix:
      cooldownPool: "botConfig"
    lang:
      cooldownPool: "botConfig"
    eval:
      disabled: true
  # All commands with the same cooldown pool share cooldowns.
  # The number is the cooldown in milliseconds.
  cooldownPools:
    playerRender: 4000
    playerLookup: 4000
    itemLookup: 5000
    botConfig: 3000
